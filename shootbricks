class Enemy {

  int hp;
  float max;
  boolean s;
  PVector pos;

  boolean dead = false;

  Enemy(int health, boolean shielded) {
    max = health;
    hp = health;
    s = shielded;
  }

  void update(int r, int c, int w, float xOff, float yOff) {

    if(hp <= 0) {
      dead = true;
    }

    pos = new PVector(xOff + c * w, yOff + r * w);

    fill(200, 0, 50);
    rect(pos.x, pos.y, w, w);
    if(s) {
      noStroke();
      fill(255);
      rect(pos.x, pos.y + 4 * w / 5, w, w/5);
    }
    float percent = hp/max;
    colorMode(HSB);
    fill(map(percent, 0, 1, 0, 80), 255, 255);
    rect(pos.x, pos.y, constrain(percent * w, 0, w), w/5);
    colorMode(RGB);
  }

  void addHealth(int h) {
    hp += h;
  }

  boolean dead() { return dead; }
  boolean shield() { return s; }

  PVector getPos() { return pos; }

}
class Row {

  Enemy[] e;

  int l, s;

  Row(int len, int size) {
   l = len;
    s = size;
    e = new Enemy[l];
    for(int i = 0; i < l; i ++) {
      e[i] = null;
    }
  }

  void update(int r, float xOff, float yOff) {
    for(int i = 0; i < l; i ++) {
      if(e[i] != null && !e[i].dead()) {
        e[i].update(r, i, s, xOff, yOff);
      } else if (e[i] != null && e[i].dead()) {
        e[i] = null;
      }
       noFill();
       stroke(255, 100);
       rect(xOff + i * s, yOff + r * s, s, s);
    }
  }

  void generate() {

    for(int i = 0; i < l; i ++) {
      if(random(1) > .5) {
        int health = floor(random(100 + round * 2, 201 + round * 2));
        boolean shield = random(1) > .85 - map(round, 0, 1000, 0, 0.85);
        e[i] = new Enemy(health, shield);
      }
    }
  }

  int getNum() {

    int num = 0;

    for(int i = 0; i < l; i ++) {
      if(e[i] != null) { 
        num ++; 
        if(e[i].shield()) { 
          num ++; 
        }
      }
    }
    return num;
  }

  Enemy[] enemies() { return e; }

}
class Board {

  Row[] b;
  int w, h;

  int s;

  float xOff, yOff;

  PVector player;

  Board(int wid, int heig, int size) {
    w = wid;
    h = heig;
    s = size;

    xOff = (width - (w * s)) / 2;
    yOff = (height - (h * s)) / 2;

    b = new Row[h];
    for(int i = 0; i < h; i ++) {
      b[i] = new Row(w, s);
    }
    b[0].generate();

    player = new PVector(width / 2, b() - s / 2);

  }

  void update() {
    noFill();
    stroke(255, 100);
    rect(l(), t(), r() - l(), b() - t());
    for(int i = 0; i < h; i ++) {
      b[i].update(i, xOff, yOff);
    }
    fill(255);
    ellipse(player.x, player.y, s/2,  s/2);
  }

  PVector getOffsets() { return new PVector(xOff, yOff); }

  void endOfTurn() {

    health -= b[h-1].getNum();

    for(int i = h - 1; i > 0; i --) {
      b[i] = b[i-1];
    }
    b[0] = new Row(w, s);
    b[0].generate();

    player.x = player.x + random(-s * w / 2, s * w / 2);
    if(player.x > r()) {
      player.x = l() + player.x - r();
    } 
    if (player.x < l()) {
      player.x = r() - (l() - player.x);
    }

  }

  float l() { return xOff; }
  float r() { return xOff + w * s; }
  float t() { return yOff - s; }
  float b() { return (yOff - s) + (h + 2) * s; }

  float s() { return s; }

  PVector player() { return player; }

  Row[] row() { return b; }

}

class Ball {

  float x, y, xv, yv, dmg;

  boolean done = false;

  Ball(float xp, float yp, float ang, float spd, float damg) {
    x = xp;
    y = yp;
    xv = spd * cos(ang);
    yv = spd * sin(ang);

    dmg = damg;
  }


  void update(float c) {
    if(!done) {
      colorMode(HSB);
      noStroke();
      fill(c, 255, 255);
      doCollision();
      x += xv;
      y += yv;

      ellipse(x, y, 5, 5);
      colorMode(RGB);
    }

  }

  void doCollision() {
    if(x + xv > board.r()) {
      x = board.r() - abs(x + xv - board.r());
      xv *= -1;
    } else if (x + xv < board.l()) {
      x = board.l() + abs(x + xv - board.l());
      xv *= -1;
    }

    if(y + yv > board.b() - board.s() && yv > 0) {
      done = true;
    } else if (y + yv < board.t() ) {
      y = board.t() + abs(y + yv - board.t());
      yv *= -1;
    }

    for(int i = 0; i < board.row().length; i ++) {
      for(int j = 0; j < board.row()[i].enemies().length; j ++) {
        if(board.row()[i].enemies()[j] != null) {
          Enemy e = board.row()[i].enemies()[j];
          if(!attack.finito()) { 
            if(pointInBox(x + xv, y, e.getPos().x, e.getPos().y, board.s())) {
              xv *= -1;
              e.addHealth(- int(dmg));
            }
            if(pointInBox(x, y + yv, e.getPos().x, e.getPos().y, board.s())) {
              yv *= -1;
              if(e.shield()) {
                if(yv < 0) {
                  e.addHealth(- int(dmg));
                }
              } else {
                e.addHealth(- int(dmg));
              }
            }
          }
        }
      }
    }

  }

  boolean done() { return done; }

  boolean pointInBox(float px, float py, float bx, float by, float ln) {
    return((px > bx) && (px < bx + ln) && (py > by) && (py < by + ln));
  }


}
class Attack {

  int size;
  int n;
  int cooldown = 4;
  int t = cooldown;
  Ball[] b;

  boolean[] d;
  boolean finito = false;
  int done = 0;

  float[] ball = new float[5];
  float c;
  Attack(int size, float xp, float yp, float ang, float spd, float damg, float col) {
    this.size = size;
    b = new Ball[size];
    d = new boolean[size];
    ball[0] = xp;
    ball[1] = yp;
    ball[2] = ang;
    ball[3] = spd;
    ball[4] = damg;
    n = 0;
    c = col;
    if(c < 205 && c > 140) { c = (c + 60) % 255; }
  }

  void update() {
    if(n < size && t >= cooldown) {
      b[n] = new Ball(ball[0], ball[1], ball[2], ball[3], ball[4]);
      t = 0;
      n ++;
    }
    t ++;
    for(int i = 0; i < n; i ++) {
      if(b[i].done() && d[i] != true) {
        d[i] = true;
        done ++;
      } else {
        b[i].update(c);
      }
    }
    if(done == size) { finito = true; }
  }

  boolean finito() { return finito; }

  void done() {
    done = size;
    for(int i = 0; i < size; i ++) {
      d[i] = true;
    }
    finito = true; 
  }

}



Board board;

float xOff, yOff;

float left, right, top, bottom;

boolean attacking;

Attack attack;

int health = 10;

int round = 0;
int score = 0;

void setup() {
  size(720, 720);
  noStroke();
  fill(255);
  board = new Board(6, 10, 50);
  attacking = false;
  xOff = board.getOffsets().x;
  yOff = board.getOffsets().y;
  textSize(20);
}

void draw() {
    background(51);
    fill(255);
    text(health, 100, 100);
    text(round + 1, width - 100, 100);

    if(attacking) {
      if(attack.finito()) { 
        attacking = false; 
        board.endOfTurn();
        round ++;
        if(health <= 0) {
          reset();
        }
      }
      attack.update();
    }
    if(!attacking && mousePressed) {
      line(board.player().x, board.player().y, mouseX, mouseY);
    }

    board.update();
}

void keyPressed() {
  if(key == ' ' && attacking) {
    attack.done();
  }
}

void mouseReleased() {
  if(!attacking) {
    float a = atan2(mouseY - board.player().y, mouseX - board.player().x);
    attacking = true;
    attack = new Attack(70 + round, board.player().x, board.player().y, a, 5, 5, random(0, 255));
  }
}

void reset() {
  board = new Board(6, 10, 50);
  attacking = false;
  health = 5;
  round = 0;
  score = 0;
}
